<?php

namespace Tests\Feature\Jetstream\Fortify;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Laravel\Fortify\Features as FortifyFeatures;
use Laravel\Jetstream\Http\Livewire\TwoFactorAuthenticationForm;
use Livewire\Livewire;
use Tests\TestCase;

class TwoFactorAuthenticationSettingsTest extends TestCase
{
    use RefreshDatabase;

    /**
     * Skip the test if Fortify two-factor authentication is not enabled.
     *
     * @return void
     */
    private function skip_if_two_factor_authentication_is_not_enabled(): void
    {
        if (!FortifyFeatures::canManageTwoFactorAuthentication()) {
            $this->markTestSkipped('Two factor authentication is not enabled.');
        }
    }

    /**
     * Test that two-factor authentication can be enabled by a user.
     *
     * @return void
     */
    public function test_two_factor_authentication_can_be_enabled(): void
    {
        $this->skip_if_two_factor_authentication_is_not_enabled();

        $user = $this->create_and_act_as_user();

        // set the session to indicate that the user has recently confirmed their password
        $this->withSession(['auth.password_confirmed_at' => time()]);

        // enable two-factor authentication from a livewire component
        Livewire::test(TwoFactorAuthenticationForm::class)
                ->call('enableTwoFactorAuthentication');

        // re-fetch the user
        $user = $user->fresh();

        // assert that two-factor authentication was enabled
        $this->assertNotNull($user->two_factor_secret);
        // assert that the user has recovery codes
        $this->assertCount(8, $user->recoveryCodes());
    }

    /**
     * Test that two-factor authentication can be regenerated by a user from a livewire component.
     *
     * @return void
     */
    public function test_recovery_codes_can_be_regenerated(): void
    {
        $this->skip_if_two_factor_authentication_is_not_enabled();

        $user = $this->create_and_act_as_user();

        // set the session to indicate that the user has recently confirmed their password
        $this->withSession(['auth.password_confirmed_at' => time()]);

        // enable two-factor authentication from a livewire component and regenerate recovery codes
        $component = Livewire::test(TwoFactorAuthenticationForm::class)
                             ->call('enableTwoFactorAuthentication')
                             ->call('regenerateRecoveryCodes');

        // re-fetch the user
        $user = $user->fresh();

        // regenerate recovery codes
        $component->call('regenerateRecoveryCodes');

        // assert that the user has recovery codes
        $this->assertCount(8, $user->recoveryCodes());
        // assert that the recovery codes have changed
        $this->assertCount(8, array_diff($user->recoveryCodes(), $user->fresh()->recoveryCodes()));
    }

    /**
     * Test that two-factor authentication can be disabled by a user from a livewire component.
     *
     * @return void
     */
    public function test_two_factor_authentication_can_be_disabled(): void
    {
        $this->skip_if_two_factor_authentication_is_not_enabled();

        $user = $this->create_and_act_as_user();

        // set the session to indicate that the user has recently confirmed their password
        $this->withSession(['auth.password_confirmed_at' => time()]);

        // enable two-factor authentication from a livewire component
        $component = Livewire::test(TwoFactorAuthenticationForm::class)
                             ->call('enableTwoFactorAuthentication');

        // assert that two-factor authentication was enabled and the user has a two-factor secret
        $this->assertNotNull($user->fresh()->two_factor_secret);

        // disable two-factor authentication from a livewire component
        $component->call('disableTwoFactorAuthentication');

        // assert that two-factor authentication was disabled and the user has no two-factor secret
        $this->assertNull($user->fresh()->two_factor_secret);
    }
}
